export class DocketEntity {
    CompanyCode: number;
    EntryBy: string;
    EntryTypes: EntryType;
    DocketNumber: string;
    Bacode: string;
    DocketDate: string;
    PaymentType: string;
    ContractParty: string;
    ContractPartyName: string;
    Origin: string;
    FromCity: string;
    Destination: string;
    ToCity: string;
    PrqNumber: string;
    PrqVehicleRequest: string;
    TransportMode: string;
    ServiceType: string;
    FtlType: string;
    PickupDelivery: string;
    PackagingType: string;
    ProductType: string;
    TruckRequestNo: string;
    PoNumber: string;
    PoDate: string;
    VendorType: string;
    VendorCode: string;
    VendorName: string;
    VehicleRequestId: string;
    DeliveryZone: string;
    DestDeliveryPinCode: string;
    DestDeliveryArea: string;
    PincodeZoneLocation: string;
    ContractDepth: string;
    ProceedDuringEntry: string;
    BasedOn1: string;
    BaseCode1: string;
    BasedOn2: string;
    BaseCode2: string;
    ContractId: string;
    NewContractID: string;
    UseFrom: string;
    UseTo: string;
    UseTransMode: string;
    UseRateType: string;
    ChargeWeightToHighestDecimal: string;
    EnableReverseCalculation: string;
    ContainerId: string;
    ContainerNo: string;
    ContainerSealNo: string;
    TAMNo: string;
    QuotationNumber: string;
    AgendaNumber: string;
    VehicleNo: string;
    TrailerNumber: string;
    DriverName1: string;
    Direct: boolean;
    ManualThcNumber: string;
    Temperature1: number;
    Temperature2: number;
    Temperature3: number;
    Temperature4: number;
    AverageTemperature: number;
    LoadPlanNumber: string;
    SpecialInstructions: string;
    Remarks: string;
    LoadType: string;
    BusinessType: string;
    Industry: string;
    Division: string;
    IsRto: boolean;
    RtoDockNo: string;
    IsOda: boolean;
    IsLocalCNote: boolean;
    IsPermitApplicable: boolean;
    IsDeferment: boolean;
    IsPod: boolean;
    IsMutidelivery: boolean;
    IsMutipickup: boolean;
    SourceCNote: string;
    WeightType: string;
    PlPartner: string;
    BookedBy: string;
    IsMarketVehicle: boolean;
    IsConsignorFromMasterOrWalkin: boolean;
    ConsignorCode: string;
    ConsignorName: string;
    IsConsignorAddressFromMasterOrWalkin: boolean;
    ConsignorAddressCode: string;
    ConsignorAddress: string;
    ConsignorCity: string;
    ConsignorPinCode: string;
    ConsignorTelephoneNo: string;
    ConsignorEmail: string;
    ConsignorMobileNo: string;
    ConsignorGstin: string;
    ConsignorTinNumber: string;
    ConsignorCstNumber: string;
    IsConsigneeFromMasterOrWalkin: boolean;
    ConsigneeCode: string;
    ConsigneeName: string;
    IsConsigneeAddressFromMasterOrWalkin: boolean;
    ConsigneeAddressCode: string;
    ConsigneeAddress: string;
    ConsigneeCity: string;
    ConsigneePinCode: string;
    ConsigneeTelephoneNo: string;
    ConsigneeEmail: string;
    ConsigneeMobileNo: string;
    ConsigneeGstin: string;
    ConsigneeTinNumber: string;
    ConsigneeCstNumber: string;
    ConsigneeDeliveryAddress: string;
    RiskType: string;
    PolicyNo: string;
    PolicyDate: string;
    PolicyValidUpto: string;
    InternalCovers: number;
    ModvatCovers: number;
    CustomerRefNo: string;
    PrivateMark: string;
    TpNumber: string;
    AppointmentID: string;
    AppointmentDate: string;
    NameOfPerson: string;
    AppointmentContactNumber: string;
    AppointmentFromTime: string;
    AppointmentToTime: string;
    AppointmentRemarks: string;
    IsAppointmentBasedDelivery: string;
    IsCSDBasedDelivery: string;
    IsMallBasedDelivery: string;
    CustomerRefrenceBatchNo: string;
    CustomerRefrenceDeliveryNo: string;
    CustomerRefrenceModelNumber: string;
    CustomerRefrenceGpsNumber: string;
    CustomerRefrenceChasisNumber: string;
    CustomerRefrenceNo1: string;
    CustomerRefrenceNo2: string;
    CustomerRefrenceEnginNo: string;
    PermitReceivedAt: string;
    PermitNumber: string;
    PermitDate: string;
    PermitValidityDate: string;
    PermitReceivedDate: string;
    ContainerNo1: string;
    ContainerSize1: string;
    ContainerNo2: string;
    ContainerSize2: string;
    ContainerField1: string;
    ContainerField2: string;
    ContainerField3: string;
    ContainerField4: string;
    ContainerField5: string;
    ContainerField6: string;
    ContainerField7: string;
    ContainerField8: string;
    ContainerField9: string;
    ContainerType: string;
    ContainerCapacity: string;
    StuffingDate: string;
    EndDate: string;
    StateDocumentDetails: StateDocumentDetailEntity[];
    ViaCityDetails: ViaCityDetailEntity[];
    BcSeriesGenerationType: string;
    BcSerialType: string;
    BcSeriess: BcSeries[];
    BCSerialNoFrom: string;
    BCSerialNoTo: string;
    WeightToConsider: string;
    VolMeasure: string;
    MaxMeasureValue: number;
    MinInvoiceValue: number;
    MaxInvoiceValue: number;
    MinInvoiceValuePerKG: number;
    MaxInvoiceValuePerKG: number;
    DefaultChargeWeight: number;
    MinChargeWeight: number;
    MaxChargeWeight: number;
    IsVolumetric: boolean;
    VolRatio: number;
    CftTotal: number;
    TotalChargedNoofPackages: number;
    TotalChargedWeight: number;
    TotalDeclaredValue: number;
    TotalPartQuantity: number;
    TotalActualWeight: number;
    ChargedKM: number;
    EwayBillExampted: boolean;
    Distance: number;
    TotalChargedNoofPkgsQuickCnot: number;
    Invoices: InvoiceEntity[];
    BillingPartys: BillingParty;
    BillingPartysCode: string;
    BillingPartysName: string;
    EddDate: string;
    EeddDate: string;
    FreightRateType: string;
    FreightRate: number;
    StandardFreightRate: number;
    MinFreightRate: number;
    FreightCharge: number;
    DiscountRateType: string;
    DiscountRate: number;
    DiscountAmount: number;
    FOVRateType: string;
    FOVRate: number;
    FOVCalculated: number;
    FOVCharged: number;
    IsCodDod: boolean;
    CODRateType: string;
    CODDODCharged: number;
    CODDODTobeCollected: number;
    IsDacc: boolean;
    DACCRateType: string;
    DACCCharged: number;
    DACCToBeCollected: string;
    OctroiRate: number;
    OctroiAmount: number;
    FlagHolidayApplied: string;
    FlagHolidayBooked: string;
    FlagCutoffApplied: string;
    DPHRateType: string;
    DPHRate: number;
    DPHAmount: number;
    DocketOtherCharges: DocketChargesEntity[];
    OtherChargesRemarks: string;
    GstDetails: DocketGstEntity;
    PurchaseOrderNo: string;
    FromPincode: string;
    ToPincode: string;
    IsDeposited: boolean;
    PaymentMode: string;
    AccCode: string;
    ChequeNo: string;
    ChequeDate: string | null;
    TDSAmount: number;
    TDSReceivableLedger: string;
    AmountApplicable: number;
    CHRGDESC1: string;
    CHRGDESC2: string;
    CHRGDESC3: string;
    CHRGDESC4: string;
    CnoteAdvance: number;
    AdvanceGivenTo: string;
    AdvanceRemarks: string;
    AdvancePayMode: string;
    AdvanceAccountCode: string;
    AdvanceChequeNo: string;
    AdvanceChequeDate: string;
    Attachments: string;
    BrimApiRule: string;
}
export class StateDocumentDetailEntity {
    StateName: string;
    StateCode: string;
    DocumentName: string;
    IsRequired: string;
    IsStaxExmpt: string;
    DocSrno: string;
    EnclosedDocumentNumber: string;
}
export class DocketChargesEntity {
    ChargeCode: string;
    ChargeName: string;
    ChargeValue: number;
    Operator: string;
    Enabled: string;
    ActiveFlag: string;
    VarybyLoc: string;
}
export class DocketGstEntity {
    IsGSTExempted: boolean;
    ExemptionCategory: string;
    GstPartyName: string;
    GstPartyCode: string;
    ServiceCodeDetails: string;
    ServiceCode: string;
    StateOfSupply: string;
    PlaceOfSupply: string;
    Gstin: string;
    Address: string;
    BilledAt: string;
    DocketSubTotal: number;
    ActualGSTRate: number;
    GSTRate: number;
    GSTAmount: number;
    RcmApplicableActual: string;
    RcmApplicable: string;
    RcmApplicableText: string;
    GSTCharged: number;
    DocketTotal: number;
    RoundOffDifference: number;
    GSTRemark: string;
    EnableGSTRCMLogic: string;
    SacCode: string;
    SacCategory: string;
    VATRate: number;
    VATAmount: number;
    TaxControlType: string;
}
export class InvoiceEntity {
    InvoiceNo: string;
    InvoiceDate: string;
    PartNumber: string;
    PartDescription: string;
    PartQuantity: number;
    TypeofPackage: string;
    Length: number;
    Breadth: number;
    Height: number;
    DeclaredValue: number;
    NoOfPackages: number;
    CubicWeight: number;
    ActualWeight: number;
    ChargedWeight: number;
    Product: string;
    HsnCode: string;
    EwbNumber: string;
    Contents: string;
    RateType: string;
    FreightRate: number;
    FreightAmount: number;
    EWBDate: string;
    EWBExpiredDate: string;
}
export enum BillingParty {
    Consignor = 1,
    Consignee = 2,
    ContractParty = 3,
    ThirdPartybilling = 4
}
export class ViaCityDetailEntity {
    ViaCity: string;
    Address: string;
    ContactPerson: string;
    ContactNumber: string;
}
export class BcSeries {
    BarCode: string;
}
export enum EntryType {
    Normal,
    Computerized
}


